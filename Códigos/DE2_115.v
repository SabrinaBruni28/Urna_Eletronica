
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE2_115(

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// I2C for HSMC  //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	GPIO,

	//////////// HSMC, HSMC connect to HSMC Default //////////
	HSMC_CLKIN_N1,
	HSMC_CLKIN_N2,
	HSMC_CLKIN_P1,
	HSMC_CLKIN_P2,
	HSMC_CLKIN0,
	HSMC_CLKOUT_N1,
	HSMC_CLKOUT_N2,
	HSMC_CLKOUT_P1,
	HSMC_CLKOUT_P2,
	HSMC_CLKOUT0,
	HSMC_D,
	HSMC_RX_D_N,
	HSMC_RX_D_P,
	HSMC_TX_D_N,
	HSMC_TX_D_P 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// I2C for HSMC  //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout 		    [35:0]		GPIO;

//////////// HSMC, HSMC connect to HSMC Default //////////
input 		          		HSMC_CLKIN_N1;
input 		          		HSMC_CLKIN_N2;
input 		          		HSMC_CLKIN_P1;
input 		          		HSMC_CLKIN_P2;
input 		          		HSMC_CLKIN0;
output		          		HSMC_CLKOUT_N1;
output		          		HSMC_CLKOUT_N2;
output		          		HSMC_CLKOUT_P1;
output		          		HSMC_CLKOUT_P2;
output		          		HSMC_CLKOUT0;
inout 		     [3:0]		HSMC_D;
inout 		    [16:0]		HSMC_RX_D_N;
inout 		    [16:0]		HSMC_RX_D_P;
inout 		    [16:0]		HSMC_TX_D_N;
inout 		    [16:0]		HSMC_TX_D_P;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [3:0] digt1;
wire [3:0] digt2;
wire [7:0] Can1;
wire [7:0] Can2;
wire [7:0] Nulo1;
//=======================================================
//  Structural coding
//=======================================================
test t(
	.clock(SW[17]), 
	.digit(SW[3:0]), 
	.valid(SW[16]),
	.start(SW[14]),
	.state(LEDG[3:0]),
	.next_state(LEDR[3:0]),
	.finish(SW[15]),
	.swap(SW[13]),
	.digit1(digt1),
	.digit2(digt2),
	.vote_status(LEDR[17:16]),
	.C1(Can1),
	.C2(Can2),
	.Nulo(Nulo1)
);

Display d1(
	.dig1(digt1),
	.display1(HEX5)
);

Display d2(
	.dig1(digt2),
	.display1(HEX4)
);

Display2 um(
	.clock(SW[17]),
	.finish(SW[15]),
	.start(SW[14]),
	.c1(Can1),
	.c2(Can2),
	.nulo(Nulo1),	
	.display1(HEX7),
	.display2(HEX6),
	.displayCem(HEX2),
	.displayDez(HEX1),
	.displayUm(HEX0)
);
endmodule
